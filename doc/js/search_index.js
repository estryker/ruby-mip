var search_data = {"index":{"searchIndex":["mip","object","utils","color_to_bytes()","connect!()","connected?()","disconnect!()","fall_back()","fall_forward()","flash_chest()","forward()","get_status()","laser_sound()","new()","pack_response()","play_sound()","send_command()","send_text_command()","speed()","spinleft()","spinright()","start()","stop()","turnleft()","turnright()","readme","dbus_test.rb~","utils.rb~"],"longSearchIndex":["mip","object","utils","utils#color_to_bytes()","mip#connect!()","mip#connected?()","mip#disconnect!()","mip#fall_back()","mip#fall_forward()","mip#flash_chest()","mip#forward()","mip#get_status()","mip#laser_sound()","mip::new()","mip#pack_response()","mip#play_sound()","mip#send_command()","mip#send_text_command()","mip#speed()","mip#spinleft()","mip#spinright()","mip::start()","mip#stop()","mip#turnleft()","mip#turnright()","","",""],"info":[["MiP","","MiP.html","",""],["Object","","Object.html","",""],["Utils","","Utils.html","",""],["color_to_bytes","Utils","Utils.html#method-i-color_to_bytes","(color_str)",""],["connect!","MiP","MiP.html#method-i-connect-21","()","<p>connect to MiP\n"],["connected?","MiP","MiP.html#method-i-connected-3F","()","<p>return a true/false if MiP is connected\n"],["disconnect!","MiP","MiP.html#method-i-disconnect-21","()","<p>disconnect from MiP\n"],["fall_back","MiP","MiP.html#method-i-fall_back","()",""],["fall_forward","MiP","MiP.html#method-i-fall_forward","()",""],["flash_chest","MiP","MiP.html#method-i-flash_chest","(color: \"red\", on_duration: 5, off_duration: 5)","<p>flash MiP&#39;s chest LED light\n"],["forward","MiP","MiP.html#method-i-forward","(duration: nil, distance: nil,angle: 0)","<p>move forward by duration or distance\n"],["get_status","MiP","MiP.html#method-i-get_status","()","<p>initial test for getting a response\n"],["laser_sound","MiP","MiP.html#method-i-laser_sound","(duration: 2)","<p>play the laser gun sound\n"],["new","MiP","MiP.html#method-c-new","(mac_address:)",""],["pack_response","MiP","MiP.html#method-i-pack_response","(response)",""],["play_sound","MiP","MiP.html#method-i-play_sound","(sound_number: 0, duration: 2)","<p>play one of the sounds that MiP knows, from 1-106\n"],["send_command","MiP","MiP.html#method-i-send_command","(*args)","<p>for now lets not allow users to send commands directly. Note that I would\nrather use Ruby BLE or dbus …\n"],["send_text_command","MiP","MiP.html#method-i-send_text_command","(command)",""],["speed","MiP","MiP.html#method-i-speed","(new_speed:)","<p>set the new speed\n"],["spinleft","MiP","MiP.html#method-i-spinleft","(num_times: 1)","<p>spin to the left by 360 degrees the specified number of times\n"],["spinright","MiP","MiP.html#method-i-spinright","(num_times: 1)","<p>spin to the right by 360 degrees the specified number of times\n"],["start","MiP","MiP.html#method-c-start","(mac,&blk)","<p>start the connection in block mode\n"],["stop","MiP","MiP.html#method-i-stop","()","<p>stop moving forward\n"],["turnleft","MiP","MiP.html#method-i-turnleft","(degrees: 90)","<p>turn left by given number of degrees\n"],["turnright","MiP","MiP.html#method-i-turnright","(degrees: 90)","<p>turn right by given number of degrees\n"],["README","","README_md.html","","<p>ruby-mip\n<p>Ruby interface to MiP robots\n<p>This is new and experimental at this stage.\n"],["dbus_test.rb~","","dbus_test_rb~.html","","<p>require &#39;dbus&#39;\n<p>DBUS                   = DBus.system_bus BLUEZ                  =\nDBUS.service …\n"],["utils.rb~","","lib/utils_rb~.html","","<p>Module Utils def  color_to_bytes(color_str)\n<p>end\n\n<pre>COLORS = {\n  &#39;aliceblue&#39;            =&gt; {:r =&gt; 240, :g =&gt; ...</pre>\n"]]}}